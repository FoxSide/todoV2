{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useSelector","state","auth","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","to","TodolistsList","todolists","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.077ea273.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'ba634933-a40a-488e-bf8b-9720d0155fba'\r\n  }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>('todo-lists');\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n  },\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data)\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<AuthMeType>>('auth/me')\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType>('auth/login')\r\n  }\r\n}\r\n\r\n\r\n// types\r\nexport type AuthMeType = {\r\n  id: number;\r\n  email: string;\r\n  logine: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe?: boolean;\r\n  captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors: Array<string>\r\n  data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, todolistsAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'login/SET-IS-LOGGED-IN':\r\n      return {...state, isLoggedIn: action.value}\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n  ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return {...state, status: action.status}\r\n    case 'APP/SET-ERROR':\r\n      return {...state, error: action.error}\r\n    case 'APP/SET-INITIALIZED':\r\n      return {...state, isInitialized: action.value}\r\n    default:\r\n      return {...state}\r\n  }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: string | null\r\n  isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true));\r\n      } else {\r\n      }\r\n    })\r\n    .finally(() => {\r\n      dispatch(setIsInitializedAC(true))\r\n    })\r\n}\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | SetIsInitializedACType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType\r\n  tasks: Array<TaskType>\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n  addTask: (title: string, todolistId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  removeTodolist: (id: string) => void\r\n  changeTodolistTitle: (id: string, newTitle: string) => void\r\n  demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      const thunk = fetchTasksTC(props.todolist.id)\r\n      dispatch(thunk)\r\n    }\r\n  }, [])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    props.addTask(title, props.todolist.id)\r\n  }, [props.addTask, props.todolist.id])\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(props.todolist.id)\r\n  }\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    props.changeTodolistTitle(props.todolist.id, title)\r\n  }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n  const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n  const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n  const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n  let tasksForTodolist = props.tasks\r\n\r\n  if (props.todolist.filter === 'active') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.todolist.filter === 'completed') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to={'/login'}/>\r\n  }\r\n\r\n  return <div>\r\n    <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n      <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </h3>\r\n    <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n    <div>\r\n      {\r\n        tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                        removeTask={props.removeTask}\r\n                                        changeTaskTitle={props.changeTaskTitle}\r\n                                        changeTaskStatus={props.changeTaskStatus}\r\n        />)\r\n      }\r\n    </div>\r\n    <div style={{paddingTop: '10px'}}>\r\n      <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n              onClick={onAllClickHandler}\r\n              color={'inherit'}\r\n      >All\r\n      </Button>\r\n      <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n              onClick={onActiveClickHandler}\r\n              color={'primary'}>Active\r\n      </Button>\r\n      <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n              onClick={onCompletedClickHandler}\r\n              color={'secondary'}>Completed\r\n      </Button>\r\n    </div>\r\n  </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required';\r\n      } else if (values.password.length < 4) {\r\n        errors.password = 'Password must be more than 4 characters';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values))\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to={'/'}/>\r\n  }\r\n\r\n  return <Grid container justifyContent={'center'}>\r\n    <Grid item justifyContent={'center'}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'}\r\n                 target={'_blank'}> here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('email')}\r\n            />\r\n            {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.touched.password && formik.errors.password &&\r\n              <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={\r\n                <Checkbox {...formik.getFieldProps('rememberMe')}/>\r\n              }\r\n            />\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n              Login\r\n            </Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Routes, Route, Navigate} from \"react-router-dom\";\r\nimport { CircularProgress } from '@mui/material'\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logoutTC())\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar/>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className=\"toolbar\">\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            Todolist\r\n          </Typography>\r\n\r\n          {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n          <Route path=\"login\" element={<Login/>}/>\r\n          <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n          <Route path=\"*\" element={<Navigate to='/404'/>}/>\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App/>\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}